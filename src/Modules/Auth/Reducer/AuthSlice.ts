import { createSlice, PayloadAction } from "@reduxjs/toolkit";

import { loginAction } from "../Reducer/AuthAction";
import { ACCESS_TOKEN, AUTH_USER } from "Services/Methods/AuthMethods";

import { errorMessage ,successMessage } from "../Config/Constants";
export interface CounterState {
  auth: boolean;
  status: "idle" | "loading" | "success" | "failed";
  error: string | null | {};
}

const initialState: CounterState = {
  auth: false,
  status: "idle",
  error: null,
};

export const authSlice = createSlice({
  name: "authentication",
  initialState,
  reducers: {
    login: (state, action: PayloadAction<boolean>) => {
      state.auth = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(loginAction.pending, (state) => {
      state.status = "loading";
    });
    builder.addCase(loginAction.fulfilled, (state, action) => {
      state.status = "success";
      state.auth = true;
      state.error = successMessage;
      localStorage.setItem(AUTH_USER, action.payload.data.selectedItemUser);
      localStorage.setItem(ACCESS_TOKEN, action.payload.data.token);
    });
    builder.addCase(loginAction.rejected, (state, action) => {
      state.status = "failed";
      state.error = action.payload || errorMessage;
    });
  },
});

export const { login } = authSlice.actions; //export actions
export default authSlice.reducer; //export reducer
